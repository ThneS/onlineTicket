// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  address   String   @unique
  nonce     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  tickets   Ticket[]
  events    Event[]
  orders    Order[]

  @@map("users")
}

model Event {
  id          String   @id @default(cuid())
  chainId     Int
  contractId  String   // 链上事件ID
  name        String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  imageUrl    String?
  maxTickets  Int
  ticketPrice String   // 存储为字符串避免精度问题
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 创建者
  organizer   User   @relation(fields: [organizerId], references: [id])
  organizerId String

  // 关联关系
  tickets Ticket[]
  orders  Order[]

  @@unique([chainId, contractId])
  @@map("events")
}

model Ticket {
  id         String   @id @default(cuid())
  chainId    Int
  tokenId    String   // NFT Token ID
  eventId    String
  seatNumber String?
  isUsed     Boolean  @default(false)
  usedAt     DateTime?
  metadata   Json?    // 额外的元数据
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 关联关系
  event   Event  @relation(fields: [eventId], references: [id])
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
  orders  Order[]

  @@unique([chainId, tokenId])
  @@map("tickets")
}

model Order {
  id            String   @id @default(cuid())
  chainId       Int
  transactionHash String?
  orderType     OrderType
  status        OrderStatus @default(PENDING)
  price         String   // 价格
  paymentToken  String   // 支付代币地址
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  buyer   User   @relation(fields: [buyerId], references: [id])
  buyerId String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  ticket  Ticket? @relation(fields: [ticketId], references: [id])
  ticketId String?

  @@map("orders")
}

model TokenPrice {
  id        String   @id @default(cuid())
  tokenA    String   // 代币A地址
  tokenB    String   // 代币B地址
  price     String   // 价格 (tokenA/tokenB)
  source    String   // 价格来源 (DEX名称)
  timestamp DateTime @default(now())

  @@unique([tokenA, tokenB])
  @@map("token_prices")
}

model LiquidityPool {
  id          String   @id @default(cuid())
  tokenA      String   // 代币A地址
  tokenB      String   // 代币B地址
  reserveA    String   // 储备量A
  reserveB    String   // 储备量B
  totalSupply String   // LP代币总供应量
  fee         Int      // 手续费 (基点)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tokenA, tokenB])
  @@map("liquidity_pools")
}

model BlockchainSync {
  id          String   @id @default(cuid())
  contractAddress String
  lastBlockNumber BigInt
  lastLogIndex    Int    @default(0)
  syncedAt        DateTime @default(now())

  @@unique([contractAddress])
  @@map("blockchain_sync")
}

enum OrderType {
  PRIMARY   // 一级市场购买
  SECONDARY // 二级市场交易
}

enum OrderStatus {
  PENDING   // 待处理
  CONFIRMED // 已确认
  FAILED    // 失败
  CANCELLED // 已取消
}
